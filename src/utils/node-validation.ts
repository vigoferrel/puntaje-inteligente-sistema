
import { TLearningNode, TPAESPrueba } from '@/types/system-types';

/**
 * Utilidades para validar la coherencia de nodos de aprendizaje - VERSI√ìN MEJORADA
 */

// Mapeo de palabras clave por tipo de prueba EXPANDIDO y MEJORADO
const THEMATIC_KEYWORDS: Record<TPAESPrueba, readonly string[]> = {
  'COMPETENCIA_LECTORA': [
    'comprensi√≥n', 'lectura', 'texto', 'interpretaci√≥n', 'an√°lisis textual', 
    'comprensi√≥n lectora', 'estrategias de lectura', 'inferencia', 's√≠ntesis',
    'informaci√≥n expl√≠cita', 'informaci√≥n impl√≠cita', 'prop√≥sito comunicativo',
    'vocabulario', 'secuencias', 'argumentos', 'evaluar', 'localizar',
    'p√°rrafo', 'oraci√≥n', 'idea principal', 'tema central', 'contexto',
    'significado', 'intenci√≥n', 'estructura textual', 'coherencia', 'cohesi√≥n',
    'narraci√≥n', 'descripci√≥n', 'argumentaci√≥n', 'exposici√≥n', 'di√°logo'
  ] as const,
  'MATEMATICA_1': [
    '√°lgebra', 'geometr√≠a', 'aritm√©tica', 'ecuaci√≥n', 'n√∫meros', 'operaciones',
    'fracciones', 'porcentaje', 'proporciones', 'estad√≠stica b√°sica', 'enteros',
    'racionales', 'potencias', 'ra√≠ces', 'funci√≥n lineal', 'pit√°goras', 'pol√≠gonos',
    '√°rea', 'per√≠metro', 'volumen', '√°ngulos', 'tri√°ngulos', 'cuadril√°teros',
    'c√≠rculo', 'gr√°ficos', 'tablas', 'promedio', 'mediana', 'moda', 'raz√≥n',
    'proporci√≥n', 'regla de tres', 'inter√©s', 'descuento', 'suma', 'resta',
    'multiplicaci√≥n', 'divisi√≥n', 'factorizaci√≥n', 'm√∫ltiplos', 'divisores'
  ] as const,
  'MATEMATICA_2': [
    'funci√≥n', 'c√°lculo', 'trigonometr√≠a', 'logaritmo', 'derivada', 'integral',
    'l√≠mite', 'probabilidad', 'estad√≠stica avanzada', 'modelamiento matem√°tico',
    'funci√≥n cuadr√°tica', 'funci√≥n exponencial', 'vectores', 'ecuaci√≥n de la recta',
    'par√°bola', 'hip√©rbola', 'elipse', 'seno', 'coseno', 'tangente', 'matriz',
    'determinante', 'sistema de ecuaciones', 'inecuaciones', 'optimizaci√≥n',
    'an√°lisis', 'continuidad', 'derivabilidad', 'm√°ximos', 'm√≠nimos',
    'concavidad', 'punto de inflexi√≥n', 'as√≠ntota', 'dominio', 'rango'
  ] as const,
  'CIENCIAS': [
    'biolog√≠a', 'qu√≠mica', 'f√≠sica', 'c√©lula', '√°tomo', 'mol√©cula', 'ecosistema',
    'gen√©tica', 'homeostasis', 'evoluci√≥n', 'fuerza', 'energ√≠a', 'reacci√≥n qu√≠mica',
    'metabolismo', 'cinem√°tica', 'estructura at√≥mica', 'organizaci√≥n biol√≥gica',
    'adn', 'prote√≠nas', 'enzimas', 'fotos√≠ntesis', 'respiraci√≥n celular',
    'mitosis', 'meiosis', 'herencia', 'mutaci√≥n', 'selecci√≥n natural',
    'biodiversidad', 'cadena alimentaria', 'ciclos biogeoqu√≠micos', 'ph',
    '√°cidos', 'bases', 'enlaces qu√≠micos', 'tabla peri√≥dica', 'velocidad',
    'aceleraci√≥n', 'movimiento', 'ondas', 'calor', 'temperatura', 'luz'
  ] as const,
  'HISTORIA': [
    'historia', 'civilizaci√≥n', 'guerra', 'independencia', 'revoluci√≥n', 'imperio',
    'siglo', '√©poca', 'cultura', 'sociedad', 'pol√≠tica', 'econ√≥mico', 'colonial',
    'prehisp√°nico', 'conquista', 'democracia', 'participaci√≥n', 'temporal', 'multicausal',
    'cronolog√≠a', 'periodizaci√≥n', 'fuentes hist√≥ricas', 'proceso hist√≥rico',
    'cambio', 'continuidad', 'causa', 'consecuencia', 'protagonistas',
    'contexto hist√≥rico', 'patrimonio', 'memoria', 'identidad', 'territorio',
    'estado', 'naci√≥n', 'ciudadan√≠a', 'derechos humanos', 'constituci√≥n',
    'rep√∫blica', 'monarqu√≠a', 'feudalismo', 'capitalismo', 'socialismo'
  ] as const
};

// Mapeo de skills v√°lidos por tipo de prueba CORREGIDO
const VALID_SKILLS_BY_TEST: Record<number, readonly number[]> = {
  1: [1, 2, 3], // COMPETENCIA_LECTORA
  2: [4, 5, 6, 7], // MATEMATICA_1
  3: [4, 5, 6, 7], // MATEMATICA_2
  4: [8, 9, 10, 11], // CIENCIAS
  5: [12, 13, 14, 15, 16] // HISTORIA
} as const;

// Validaci√≥n de niveles cognitivos v√°lidos
const VALID_COGNITIVE_LEVELS = [
  'RECORDAR', 'COMPRENDER', 'APLICAR', 'ANALIZAR', 'EVALUAR', 'CREAR'
] as const;

// Mapeo de test_id a prueba CORREGIDO
const TEST_ID_TO_PRUEBA: Record<number, TPAESPrueba> = {
  1: 'COMPETENCIA_LECTORA',
  2: 'MATEMATICA_1',
  3: 'MATEMATICA_2',
  4: 'CIENCIAS',
  5: 'HISTORIA'
} as const;

/**
 * Valida si un nodo es tem√°ticamente coherente con su tipo de prueba asignado - MEJORADO
 */
export function validateNodeThematicCoherence(node: TLearningNode): {
  isValid: boolean;
  suggestedTest?: TPAESPrueba;
  confidence: number;
  issues: string[];
} {
  const issues: string[] = [];
  let suggestedTest: TPAESPrueba | undefined;
  let maxScore = 0;
  
  const nodeText = `${node.title} ${node.description || ''}`.toLowerCase();
  
  // Verificar coherencia tem√°tica con algoritmo mejorado
  const testScores: Record<TPAESPrueba, number> = {} as Record<TPAESPrueba, number>;
  
  for (const [testType, keywords] of Object.entries(THEMATIC_KEYWORDS)) {
    const score = keywords.reduce((acc: number, keyword: string) => {
      const keywordLower = keyword.toLowerCase();
      // Contar m√∫ltiples apariciones y dar m√°s peso a coincidencias exactas
      const exactMatches = (nodeText.match(new RegExp(`\\b${keywordLower}\\b`, 'g')) || []).length;
      const partialMatches = (nodeText.match(new RegExp(keywordLower, 'g')) || []).length - exactMatches;
      return acc + (exactMatches * 2) + (partialMatches * 0.5);
    }, 0);
    
    testScores[testType as TPAESPrueba] = score;
    
    if (score > maxScore) {
      maxScore = score;
      suggestedTest = testType as TPAESPrueba;
    }
  }
  
  // Verificar coherencia entre test_id y subject_area
  const expectedSubjectArea = TEST_ID_TO_PRUEBA[node.testId];
  if (expectedSubjectArea && node.subject_area !== expectedSubjectArea) {
    issues.push(`Subject area (${node.subject_area}) no coincide con test_id ${node.testId} (esperado: ${expectedSubjectArea})`);
  }
  
  // Verificar coherencia entre prueba y subject_area
  if (node.subject_area !== node.prueba) {
    issues.push(`Subject area (${node.subject_area}) no coincide con prueba (${node.prueba})`);
  }
  
  // Validar cognitive_level
  if (node.cognitive_level && !VALID_COGNITIVE_LEVELS.includes(node.cognitive_level as any)) {
    issues.push(`Nivel cognitivo inv√°lido: ${node.cognitive_level}`);
  }
  
  // Verificar si el contenido tem√°tico coincide con la prueba asignada
  const currentTestScore = testScores[node.prueba] || 0;
  const hasThematicContent = maxScore > 0;
  
  if (hasThematicContent && currentTestScore === 0 && maxScore >= 2) {
    issues.push(`Contenido tem√°tico no coincide con ${node.prueba}. Sugiere: ${suggestedTest} (score: ${maxScore})`);
  }
  
  // Verificar skill_id coherencia con umbral m√°s permisivo
  const validSkills = VALID_SKILLS_BY_TEST[node.testId];
  if (node.skillId && validSkills && !validSkills.includes(node.skillId)) {
    issues.push(`Skill ID ${node.skillId} no es v√°lido para test_id ${node.testId} (v√°lidos: ${validSkills.join(', ')})`);
  }
  
  // Calcular confianza mejorada
  const confidence = hasThematicContent 
    ? Math.min(currentTestScore / Math.max(maxScore, 1), 1) 
    : 1; // Si no hay contenido tem√°tico espec√≠fico, asumimos que est√° bien
  
  // Criterio de validez m√°s permisivo
  const isValid = issues.length === 0 && (confidence > 0.5 || maxScore < 2);
  
  return {
    isValid,
    suggestedTest,
    confidence,
    issues
  };
}

/**
 * Filtra nodos con validaci√≥n de coherencia tem√°tica mejorada
 */
export function filterNodesWithValidation(
  nodes: TLearningNode[], 
  selectedPrueba: TPAESPrueba,
  enableLogging = true
): TLearningNode[] {
  // Filtrado m√°s estricto: tanto prueba como subject_area deben coincidir
  const filtered = nodes.filter(node => {
    const pruebaMatch = node.prueba === selectedPrueba;
    const subjectAreaMatch = node.subject_area === selectedPrueba;
    const testIdMatch = TEST_ID_TO_PRUEBA[node.testId] === selectedPrueba;
    
    // Aceptar si al menos 2 de los 3 criterios coinciden
    const matchCount = [pruebaMatch, subjectAreaMatch, testIdMatch].filter(Boolean).length;
    return matchCount >= 2;
  });
  
  if (enableLogging) {
    console.group(`üîç Filtrado mejorado de nodos para ${selectedPrueba}`);
    console.log(`üìä Total de nodos disponibles: ${nodes.length}`);
    console.log(`‚úÖ Nodos filtrados: ${filtered.length}`);
    
    // Verificar coherencia tem√°tica de nodos filtrados
    const validationResults = filtered.map(node => ({
      node: node.title,
      validation: validateNodeThematicCoherence(node)
    }));
    
    const invalidNodes = validationResults.filter(r => !r.validation.isValid);
    
    if (invalidNodes.length > 0) {
      console.warn(`‚ö†Ô∏è Nodos con problemas de coherencia: ${invalidNodes.length}/${filtered.length}`);
      invalidNodes.forEach(invalid => {
        console.warn(`- ${invalid.node}: ${invalid.validation.issues.join(', ')}`);
      });
    } else {
      console.log(`‚úÖ Todos los nodos filtrados son coherentes tem√°ticamente`);
    }
    
    // Log de distribuci√≥n por criterio
    const criteriaStats = nodes.reduce((acc, node) => {
      const key = `${node.prueba}-${node.subject_area}-${TEST_ID_TO_PRUEBA[node.testId]}`;
      acc[key] = (acc[key] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('üìà Distribuci√≥n por criterios (prueba-subject_area-test_id):', criteriaStats);
    console.groupEnd();
  }
  
  return filtered;
}

/**
 * Valida la integridad completa del conjunto de nodos con mejor tipado
 */
export function validateNodesIntegrity(nodes: TLearningNode[]): {
  isValid: boolean;
  issues: Array<{
    type: 'thematic_mismatch' | 'skill_mismatch' | 'missing_content' | 'cognitive_level_mismatch' | 'subject_area_mismatch' | 'test_id_mismatch';
    nodeId: string;
    description: string;
    suggestion?: string;
  }>;
  summary: {
    totalNodes: number;
    validNodes: number;
    issuesCount: number;
    issuesByType: Record<string, number>;
  };
} {
  const issues: Array<{
    type: 'thematic_mismatch' | 'skill_mismatch' | 'missing_content' | 'cognitive_level_mismatch' | 'subject_area_mismatch' | 'test_id_mismatch';
    nodeId: string;
    description: string;
    suggestion?: string;
  }> = [];
  
  const issuesByType: Record<string, number> = {};
  
  nodes.forEach(node => {
    const validation = validateNodeThematicCoherence(node);
    
    if (!validation.isValid) {
      validation.issues.forEach(issue => {
        let type: 'thematic_mismatch' | 'skill_mismatch' | 'missing_content' | 'cognitive_level_mismatch' | 'subject_area_mismatch' | 'test_id_mismatch';
        
        if (issue.includes('Skill ID')) {
          type = 'skill_mismatch';
        } else if (issue.includes('Subject area') && issue.includes('test_id')) {
          type = 'test_id_mismatch';
        } else if (issue.includes('Subject area')) {
          type = 'subject_area_mismatch';
        } else if (issue.includes('Nivel cognitivo')) {
          type = 'cognitive_level_mismatch';
        } else {
          type = 'thematic_mismatch';
        }
        
        issuesByType[type] = (issuesByType[type] || 0) + 1;
        
        issues.push({
          type,
          nodeId: node.id,
          description: `${node.title}: ${issue}`,
          suggestion: validation.suggestedTest
        });
      });
    }
    
    // Validaci√≥n de contenido mejorada
    if (!node.description || node.description.trim().length < 20) {
      const type = 'missing_content';
      issuesByType[type] = (issuesByType[type] || 0) + 1;
      issues.push({
        type,
        nodeId: node.id,
        description: `${node.title}: Descripci√≥n insuficiente (m√≠nimo 20 caracteres)`
      });
    }
  });
  
  const uniqueNodesWithIssues = new Set(issues.map(issue => issue.nodeId));
  
  return {
    isValid: issues.length === 0,
    issues,
    summary: {
      totalNodes: nodes.length,
      validNodes: nodes.length - uniqueNodesWithIssues.size,
      issuesCount: issues.length,
      issuesByType
    }
  };
}

/**
 * Funci√≥n de auto-correcci√≥n para nodos con problemas menores
 */
export function autoCorrectNodeIssues(node: TLearningNode): TLearningNode {
  const correctedNode = { ...node };
  
  // Auto-corregir subject_area basado en test_id
  const expectedSubjectArea = TEST_ID_TO_PRUEBA[node.testId];
  if (expectedSubjectArea && node.subject_area !== expectedSubjectArea) {
    correctedNode.subject_area = expectedSubjectArea;
    console.log(`üîß Auto-corregido subject_area para ${node.title}: ${node.subject_area} ‚Üí ${expectedSubjectArea}`);
  }
  
  // Auto-corregir cognitive_level si es inv√°lido
  if (!node.cognitive_level || !VALID_COGNITIVE_LEVELS.includes(node.cognitive_level as any)) {
    correctedNode.cognitive_level = 'COMPRENDER';
    console.log(`üîß Auto-corregido cognitive_level para ${node.title}: ${node.cognitive_level} ‚Üí COMPRENDER`);
  }
  
  // Auto-corregir skill_id si no es v√°lido para el test
  const validSkills = VALID_SKILLS_BY_TEST[node.testId];
  if (validSkills && node.skillId && !validSkills.includes(node.skillId)) {
    correctedNode.skillId = validSkills[0]; // Usar el primer skill v√°lido
    console.log(`üîß Auto-corregido skill_id para ${node.title}: ${node.skillId} ‚Üí ${validSkills[0]}`);
  }
  
  return correctedNode;
}
