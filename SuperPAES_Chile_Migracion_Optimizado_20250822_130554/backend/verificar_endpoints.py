#!/usr/bin/env python3
"""
Script para verificar todos los endpoints del backend SuperPAES
"""

import requests
import json
import time
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:5000"
TIMEOUT = 5

# Lista de endpoints a verificar
ENDPOINTS = [
    # Endpoints b√°sicos
    {"url": "/api/health", "method": "GET", "description": "Estado del servidor"},
    {"url": "/api/user", "method": "GET", "description": "Datos del usuario"},
    {"url": "/api/paes-goals", "method": "GET", "description": "Metas PAES"},
    {"url": "/api/playlists", "method": "GET", "description": "Playlists de estudio"},
    {"url": "/api/agents", "method": "GET", "description": "Agentes IA"},
    {"url": "/api/learning-metrics", "method": "GET", "description": "M√©tricas de aprendizaje"},
    {"url": "/api/dashboard", "method": "GET", "description": "Dashboard principal"},
    {"url": "/api/exercises", "method": "GET", "description": "Ejercicios PAES"},
    {"url": "/api/subjects", "method": "GET", "description": "Materias disponibles"},
    {"url": "/api/difficulties", "method": "GET", "description": "Niveles de dificultad"},
    
    # Endpoints del sistema
    {"url": "/api/system/status", "method": "GET", "description": "Estado del sistema"},
    {"url": "/api/system/quantum-scripts", "method": "GET", "description": "Scripts cu√°nticos"},
    {"url": "/api/system/alerts", "method": "GET", "description": "Alertas del sistema"},
]

def test_endpoint(url, method="GET", description=""):
    """Prueba un endpoint espec√≠fico"""
    full_url = f"{BASE_URL}{url}"
    
    try:
        if method == "GET":
            response = requests.get(full_url, timeout=TIMEOUT)
        elif method == "POST":
            response = requests.post(full_url, timeout=TIMEOUT, json={})
        else:
            return False, f"M√©todo {method} no soportado"
        
        if response.status_code == 200:
            return True, f"‚úÖ {description} - Status: {response.status_code}"
        else:
            return False, f"‚ùå {description} - Status: {response.status_code}"
            
    except requests.exceptions.ConnectionError:
        return False, f"‚ùå {description} - Error de conexi√≥n (servidor no disponible)"
    except requests.exceptions.Timeout:
        return False, f"‚ùå {description} - Timeout"
    except Exception as e:
        return False, f"‚ùå {description} - Error: {str(e)}"

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üîç VERIFICACI√ìN DE ENDPOINTS - SUPERPAES BACKEND")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL Base: {BASE_URL}")
    print(f"‚è±Ô∏è  Timeout: {TIMEOUT} segundos")
    print("=" * 60)
    
    # Verificar si el servidor est√° disponible
    print("üîå Verificando conectividad del servidor...")
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=TIMEOUT)
        if response.status_code == 200:
            print("‚úÖ Servidor disponible")
        else:
            print(f"‚ö†Ô∏è  Servidor responde con status: {response.status_code}")
    except:
        print("‚ùå Servidor no disponible")
        print("üí° Aseg√∫rate de que el backend est√© ejecut√°ndose en el puerto 5000")
        return
    
    print("\nüìã Probando endpoints...")
    print("-" * 60)
    
    successful = 0
    total = len(ENDPOINTS)
    
    for endpoint in ENDPOINTS:
        success, message = test_endpoint(
            endpoint["url"], 
            endpoint["method"], 
            endpoint["description"]
        )
        print(message)
        if success:
            successful += 1
        time.sleep(0.1)  # Peque√±a pausa entre requests
    
    print("-" * 60)
    print(f"üìä RESUMEN: {successful}/{total} endpoints funcionando")
    
    if successful == total:
        print("üéâ ¬°Todos los endpoints est√°n funcionando correctamente!")
    elif successful > total * 0.8:
        print("‚úÖ La mayor√≠a de endpoints est√°n funcionando")
    else:
        print("‚ö†Ô∏è  Algunos endpoints tienen problemas")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
